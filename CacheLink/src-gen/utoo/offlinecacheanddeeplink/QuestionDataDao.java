package utoo.offlinecacheanddeeplink;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import utoo.offlinecacheanddeeplink.QuestionData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_DATA".
*/
public class QuestionDataDao extends AbstractDao<QuestionData, Void> {

    public static final String TABLENAME = "QUESTION_DATA";

    /**
     * Properties of entity QuestionData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Asked_by = new Property(1, String.class, "asked_by", false, "ASKED_BY");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property User_id = new Property(4, Long.class, "user_id", false, "USER_ID");
        public final static Property Answer_tutor_id = new Property(5, Long.class, "answer_tutor_id", false, "ANSWER_TUTOR_ID");
        public final static Property Answered_by = new Property(6, String.class, "answered_by", false, "ANSWERED_BY");
        public final static Property Created_at = new Property(7, String.class, "created_at", false, "CREATED_AT");
        public final static Property Subject = new Property(8, String.class, "subject", false, "SUBJECT");
        public final static Property Picture_url = new Property(9, String.class, "picture_url", false, "PICTURE_URL");
        public final static Property User_rating = new Property(10, Double.class, "user_rating", false, "USER_RATING");
    };


    public QuestionDataDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_DATA\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"ASKED_BY\" TEXT," + // 1: asked_by
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"STATUS\" TEXT," + // 3: status
                "\"USER_ID\" INTEGER," + // 4: user_id
                "\"ANSWER_TUTOR_ID\" INTEGER," + // 5: answer_tutor_id
                "\"ANSWERED_BY\" TEXT," + // 6: answered_by
                "\"CREATED_AT\" TEXT," + // 7: created_at
                "\"SUBJECT\" TEXT," + // 8: subject
                "\"PICTURE_URL\" TEXT," + // 9: picture_url
                "\"USER_RATING\" REAL);"); // 10: user_rating
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String asked_by = entity.getAsked_by();
        if (asked_by != null) {
            stmt.bindString(2, asked_by);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(5, user_id);
        }
 
        Long answer_tutor_id = entity.getAnswer_tutor_id();
        if (answer_tutor_id != null) {
            stmt.bindLong(6, answer_tutor_id);
        }
 
        String answered_by = entity.getAnswered_by();
        if (answered_by != null) {
            stmt.bindString(7, answered_by);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(8, created_at);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(9, subject);
        }
 
        String picture_url = entity.getPicture_url();
        if (picture_url != null) {
            stmt.bindString(10, picture_url);
        }
 
        Double user_rating = entity.getUser_rating();
        if (user_rating != null) {
            stmt.bindDouble(11, user_rating);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public QuestionData readEntity(Cursor cursor, int offset) {
        QuestionData entity = new QuestionData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // asked_by
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // user_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // answer_tutor_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answered_by
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // created_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subject
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // picture_url
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // user_rating
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuestionData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAsked_by(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAnswer_tutor_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAnswered_by(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreated_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubject(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicture_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUser_rating(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(QuestionData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(QuestionData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
