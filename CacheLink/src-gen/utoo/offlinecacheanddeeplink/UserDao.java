package utoo.offlinecacheanddeeplink;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import utoo.offlinecacheanddeeplink.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Gender = new Property(1, String.class, "gender", false, "GENDER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Username = new Property(4, String.class, "username", false, "USERNAME");
        public final static Property Registered = new Property(5, Long.class, "registered", false, "REGISTERED");
        public final static Property Dob = new Property(6, Long.class, "dob", false, "DOB");
        public final static Property School = new Property(7, String.class, "school", false, "SCHOOL");
        public final static Property Country_code = new Property(8, String.class, "country_code", false, "COUNTRY_CODE");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Profile_pic_url = new Property(10, String.class, "profile_pic_url", false, "PROFILE_PIC_URL");
        public final static Property Role = new Property(11, String.class, "role", false, "ROLE");
        public final static Property Rating = new Property(12, Double.class, "rating", false, "RATING");
        public final static Property Rating_total = new Property(13, Double.class, "rating_total", false, "RATING_TOTAL");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"GENDER\" TEXT," + // 1: gender
                "\"NAME\" TEXT," + // 2: name
                "\"EMAIL\" TEXT," + // 3: email
                "\"USERNAME\" TEXT," + // 4: username
                "\"REGISTERED\" INTEGER," + // 5: registered
                "\"DOB\" INTEGER," + // 6: dob
                "\"SCHOOL\" TEXT," + // 7: school
                "\"COUNTRY_CODE\" TEXT," + // 8: country_code
                "\"PHONE\" TEXT," + // 9: phone
                "\"PROFILE_PIC_URL\" TEXT," + // 10: profile_pic_url
                "\"ROLE\" TEXT," + // 11: role
                "\"RATING\" REAL," + // 12: rating
                "\"RATING_TOTAL\" REAL);"); // 13: rating_total
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(2, gender);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        Long registered = entity.getRegistered();
        if (registered != null) {
            stmt.bindLong(6, registered);
        }
 
        Long dob = entity.getDob();
        if (dob != null) {
            stmt.bindLong(7, dob);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(8, school);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(9, country_code);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String profile_pic_url = entity.getProfile_pic_url();
        if (profile_pic_url != null) {
            stmt.bindString(11, profile_pic_url);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(12, role);
        }
 
        Double rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(13, rating);
        }
 
        Double rating_total = entity.getRating_total();
        if (rating_total != null) {
            stmt.bindDouble(14, rating_total);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gender
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // registered
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // dob
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // school
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // country_code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // profile_pic_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // role
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // rating
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13) // rating_total
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGender(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegistered(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDob(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSchool(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCountry_code(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProfile_pic_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRole(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRating(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setRating_total(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(User entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
