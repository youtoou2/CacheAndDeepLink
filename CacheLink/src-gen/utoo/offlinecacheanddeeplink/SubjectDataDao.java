package utoo.offlinecacheanddeeplink;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import utoo.offlinecacheanddeeplink.SubjectData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBJECT_DATA".
*/
public class SubjectDataDao extends AbstractDao<SubjectData, Void> {

    public static final String TABLENAME = "SUBJECT_DATA";

    /**
     * Properties of entity SubjectData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Abbr = new Property(1, String.class, "abbr", false, "ABBR");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Region = new Property(3, String.class, "region", false, "REGION");
    };


    public SubjectDataDao(DaoConfig config) {
        super(config);
    }
    
    public SubjectDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBJECT_DATA\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"ABBR\" TEXT," + // 1: abbr
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"REGION\" TEXT);"); // 3: region
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBJECT_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SubjectData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String abbr = entity.getAbbr();
        if (abbr != null) {
            stmt.bindString(2, abbr);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(4, region);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SubjectData readEntity(Cursor cursor, int offset) {
        SubjectData entity = new SubjectData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // abbr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // region
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SubjectData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAbbr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRegion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SubjectData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SubjectData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
